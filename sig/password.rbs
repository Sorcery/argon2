# Classes
module Argon2
  class Password
    # Password constants
    DEFAULT_T_COST: Integer
    MIN_T_COST: Integer
    MAX_T_COST: Integer
    DEFAULT_M_COST: Integer
    MIN_M_COST: Integer
    MAX_M_COST: Integer

    # Password attributes
    attr_reader digest: String?
    attr_reader checksum: String?
    attr_reader salt: String?
    attr_reader variant: String?
    attr_reader version: Integer?
    attr_reader t_cost: Integer?
    attr_reader m_cost: Integer?
    attr_reader p_cost: Integer?

    # Password class methods
    def self.create: (String password, ?Hash[Symbol, Integer & String] options) -> instance
    def self.valid_hash?: (String digest) -> bool
    def self.verify_password: (untyped password, untyped digest, ?String? secret) -> bool

    # Password instance methods
    def initialize: (untyped digest) -> instance
    def matches?: (untyped password, ?String? secret) -> bool
    def ==: (untyped password) -> bool
    def to_s: () -> String
    def to_str: () -> String

    private

    # Password instance methods (private)
    def valid_hash?: (String digest) -> bool
    def split_hash: (String digest) -> Hash[Symbol, String & Integer]
  end
end
